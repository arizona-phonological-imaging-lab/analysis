#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import re
import string
from math import ceil
import sys
from PyQt4 import QtGui

class Converter():

    def main(self, folder):
        conFilePath, jpgPaths = self.read_folder_contents(folder)
        numFiles, splitCoords = self.read_con_file(conFilePath)
        resampled = self.resample_data(numFiles, splitCoords)
        self.print_new_files(numFiles, folder, jpgPaths, splitCoords)

    def read_folder_contents(self, folder):
        """ Reads in the contents of a folder and groups 
        the sorted .jpg paths together in a list, and creates an
        object for the  .con file. The folder should contain *only* the 
        relevant jpgs (tongue frames) and the single corresponding con file
        generated by EdgeTrak. """
        folder
        folderContents = os.listdir(folder)
        jpgPaths=[]
        for fileName in folderContents:                                         # this loop does the sorting of .con and .jpg files
            if '.con' in fileName:
                conFilePath = os.path.normpath(os.path.join(folder, fileName))
            if ".jpg" in fileName:
                jpgPaths.append(os.path.splitext(fileName)[0])
            else:
                pass
        jpgPaths = sorted(jpgPaths)                                             # sort the .jpg paths because the .con file columns 
                                                                                # are ordered according to the jpg filenames
        return conFilePath, jpgPaths
		
    def read_con_file(self, conFilePath):
        """Reads in a .con file, returns the list self.splitCoords,
        which is a list of the coordinates generated by EdgeTrak and then
        split according to the corresponding .jpg image"""
        conFile = open(conFilePath, 'r')                                        # read in the file
        conLines = conFile.readlines()                                          # create list with lines as elements
        conFile.close()
        numFiles = ((len(conLines[0].strip().split())) / 2)                     # count number of columns in file and divide by 2 
                                                                                # (since 2 columns to each image file)
        splitCoords = [[] for i in range(numFiles)]                             # create list to append paired coordinates for 
                                                                                # each image file
        for line in conLines:
            i=0
            coords = line.strip().split()                   
            for sublist in splitCoords:                                         # each sublist corresponds to an image file 
                                                                                # (tongue frame)
                sublist.append((coords[(2*i)], coords[(2*i)+1]))                # the input .con file has paired columns from left 
                i+=1                                                            # to right (1,2), (3,4), (5,6)..., and this assigns
                                                                                # each pair to a tuple
                                                                                # and the tuple to its own sublist on splitCoord
        return numFiles, splitCoords

    def resample_data(self, numFiles, splitCoords, resampleTo = 32):
        """ Used to get the EdgeTrak data compatable with 
        AutoTrace, which handles 32 points per traced image. """
        for i in range(numFiles):
            origLength = len(splitCoords[i])                                    # original length of the .con file columns 
                                                                                # (ie the number of traced points)
            if  origLength > resampleTo:
                resampled = []
                for j in range(resampleTo):
                    resampled.append(splitCoords[i][int(ceil(j * 
                                            origLength / resampleTo))])         # walk down the array of tuples (coordinates) 
                                                                                # in an evenly-spaced manner
                splitCoords[i]=resampled

            else:
                pass
        return resampled


    def print_new_files(self, numFiles, folder, jpgPaths, splitCoords):
        """ Print out a new file for each .jpg tongue image, 
        using the filename of each .jpg to create the filename for the
        corresponding .txt file. """
        for fileNum in range(numFiles):
            outFile= open(folder + '/output_' +
                          str(jpgPaths[fileNum]) + '.txt' , 'w')
            i=0
            for item in splitCoords[fileNum]:
                i+=1
                outFile.write(str(i) + '\t'  + str(item[0]) + 
                                  '\t' + str(item[1]) + '\n')                   # write line in the new file with tab delimiting
